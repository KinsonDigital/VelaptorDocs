name: ðŸš€Production Release


defaults:
  run:
    shell: pwsh


on:
  # NOTE: Do not delete this trigger.  This is used by the Velaptor release system 
  workflow_dispatch:

jobs:
  validate_branch:
    name: Validate Branch
    runs-on: ubuntu-latest
    steps:
      - name: Run Validation
        run: |
          $branch = "${{ github.ref }}";

          if ($branch -ne "refs/heads/${{ vars.RELEASE_BRANCH }}") {
            Write-Host "::error::This workflow can only be run on the '${{ vars.RELEASE_BRANCH }}' branch.";
            exit 1;
          }


  perform_prod_release:
    name: Perform Production Release
    needs: validate_branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    concurrency: 
      group: "pages"
      cancel-in-progress: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CICD_TOKEN }}
          persist-credentials: true

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      # This sdk version SHOULD be the same as the version set in the Velaptor project
      - name: Setup dotnet (${{ vars.VELAPTOR_DOTNET_SDK_VERSION }})
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.VELAPTOR_DOTNET_SDK_VERSION }}

      - name: Setup Node (${{ vars.NODE_VERSION }})
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Setup PNPM (${{ vars.PNPM_VERSION }})
        uses: pnpm/action-setup@v2
        with:
          version: ${{ vars.PNPM_VERSION }}

      # Move the 'next-versioning.ts' to scripts folder
      - name: Disable Next Version Feature
        run: |
          deno run `
            --allow-read `
            --allow-write `
            "${{ github.workspace }}/.github/cicd/manual-testing/next-versioning.ts" `
            "${{ github.workspace }}/docusaurus.config.js" `
            "next-version" `
            "enable";

      - name: Install Dependencies (pnpm)
        run: pnpm install;

      - name: Update Website Version
        id: apply_version_to_site
        run: |
          # Get the path to the output file created by the GitHub hosted runner
          $outputFilePath = $env:GITHUB_OUTPUT;

          if ($outputFilePath -eq "") {
            Write-Host "::error::Failed to get output file path from the 'GITHUB_OUTPUT' environment variable.";
            exit 1;
          }

          Write-Host "::notice::Output File Path: $outputFilePath";

          # NOTE: The script executed below sets the step output.  This is why the output file
          # path is passed in as an argument using the '$outputFilePath' variable.
          deno run `
            --allow-read `
            --allow-write `
            --allow-env `
            "${{ github.workspace }}/.github/cicd/scripts/update-website-version.ts" `
            "$outputFilePath";

      - name: Build Site
        run: pnpm build

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v2.0.0
        with:
          path: "${{ github.workspace }}/${{ vars.RELATIVE_ARTIFACT_DIR_PATH }}"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Create Release Tag (${{ steps.apply_version_to_site.outputs.version }})
        run: |
          $tag = "${{ steps.apply_version_to_site.outputs.version }}";
          
          git config --global user.email "${{ vars.GIT_CONFIG_EMAIL }}";
          git config --global user.name "Velaptor Docs Github Actions - (On behalf of Calvin Wilkinson)"; 
          
          git commit --allow-empty -m "ðŸš€Production Release";
          git push;

          git tag -a $tag -m "Production Release";
          git push origin $tag;
