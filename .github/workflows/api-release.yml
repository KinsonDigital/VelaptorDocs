name: ðŸš€Production API Release
run-name: ðŸš€Production API Release (Velaptor ${{ inputs.api-version }}) ${{ inputs.dry-run == true && '(Dry Run)' || '' }}


defaults:
  run:
    shell: pwsh


on:
  # NOTE: Do not delete this trigger.  This is used by the Velaptor release system 
  workflow_dispatch:
    inputs:
      api-version:
        description: 'The version of API docs to release.'
        required: true
        type: string
      dry-run:
        description: Dry Run - Check to run the workflow without creating a release.
        required: false
        default: false
        type: boolean


jobs:
  validate_branch:
    name: Validate Branch
    runs-on: ubuntu-latest
    steps:
      - name: Run Validation
        run: |
          $branch = "${{ github.ref }}";
          $isNotDryRun = "${{ inputs.dry-run }}" -ne "true";

          # If the branch is a dry run, allow the workflow on any branch
          if ($isNotDryRun -and $branch -ne "refs/heads/${{ vars.RELEASE_BRANCH }}") {
            Write-Host "::error::This workflow can only be run on the '${{ vars.RELEASE_BRANCH }}' branch.";
            exit 1;
          }


  validate_api_version:
    name: Validate API Version (${{ inputs.api-version }})
    needs: validate_branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Validate Syntax
        run: |
          if ("${{ inputs.api-version }}" -notmatch "^v[0-9]+\.[0-9]+\.[0-9]+(|-preview\.[0-9]+)$") {
            Write-Host "::error::The API version '${{ inputs.api-version }}' is not valid.";
            exit 1;
          }

      - name: Set Up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Validate Version Exists
        env:
          VERSION: "${{ inputs.api-version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"
        run: |
          deno run `
            --allow-env --allow-read --allow-net `
            "${{ github.workspace }}/.github/cicd/scripts/velaptor-version-exists.ts";


  update_csharp_project_files:
    name: Update CSharp Project Files
    needs: validate_branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Update CSharp Project Files
        run: |
          deno run `
            --allow-read --allow-write --allow-sys --allow-net `
            "${{ github.workspace }}/.github/cicd/scripts/update-velaptor-nugets.ts" `
            "${{ github.workspace }}/${{ vars.SAMPLES_DIR_NAME }}" `
            "${{ inputs.api-version }}" `
            "${{ secrets.CICD_TOKEN }}";

      - name: Setup dotnet SDK ${{ vars.NET_SDK_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.NET_SDK_VERSION }}

      - name: Build Solution
        run: dotnet build ${{ github.workspace }}/${{ vars.SAMPLES_DIR_NAME }}/${{ vars.SAMPLES_SOLUTION_NAME }}.sln -c Debug;


  perform_api_release:
    name: Perform API Release
    needs: [validate_branch, validate_api_version, update_csharp_project_files]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    concurrency: 
      group: "pages"
      cancel-in-progress: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CICD_TOKEN }}
          persist-credentials: true

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      # This is needed for the step below that generates the API docs
      - name: Setup dotnet (${{ vars.VELAPTOR_DOTNET_SDK_VERSION }})
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.VELAPTOR_DOTNET_SDK_VERSION }}

      - name: Setup Node (${{ vars.NODE_VERSION }})
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Setup PNPM (${{ vars.PNPM_VERSION }})
        uses: pnpm/action-setup@v2
        with:
          version: ${{ vars.PNPM_VERSION }}

      - name: Update CSharp Project Files
        env:
          ROOT_DIR_PATH: "${{ github.workspace }}/SampleProjects"
          VERSION_OR_INTERACTIVE: "${{ inputs.api-version }}"
        run: |
          deno run `
            --allow-env --allow-read --allow-write --allow-sys --allow-net `
            "${{ github.workspace }}/.github/cicd/scripts/update-velaptor-nugets.ts";
  
      - name: Remove Oldest API Version
        env:
          SEARCH_DIR_PATH: "${{ github.workspace }}"        
        run: |
          deno run --allow-env --allow-read --allow-write `
            "${{ github.workspace }}/.github/cicd/scripts/delete-oldest-api-docs.ts";

      - name: Generate API Docs (${{ inputs.api-version }})
        env:
          OUTPUT_DIR_PATH: "${{ github.workspace }}/docs/api"
          TAG_OR_BRANCH: "${{ inputs.api-version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"
        run: |
          deno run `
            --allow-env --allow-read --allow-write --allow-run --allow-net `
            "${{ github.workspace }}/.github/cicd/scripts/generate-new-api-docs.ts";

      - name: Install Dependencies (pnpm)
        run: pnpm install;

      - name: Create Docusaurus Version (${{ inputs.api-version }})
        run: |
          $version = "${{ inputs.api-version }}";
          $version = $version.StartsWith("v") ? $version.Substring(1) : $version;
          pnpm docusaurus docs:version $version;

      - name: Update Website Version
        id: apply_version_to_site
        run: |
          # Get the path to the output file created by the GitHub hosted runner
          $outputFilePath = $env:GITHUB_OUTPUT;

          if ($outputFilePath -eq "") {
            Write-Host "::error::Failed to get output file path from the 'GITHUB_OUTPUT' environment variable.";
            exit 1;
          }

          # NOTE: The script executed below sets the step output.  This is why the output file
          # path is passed in as an argument using the '$outputFilePath' variable.
          deno run --allow-read --allow-write --allow-env `
            "${{ github.workspace }}/.github/cicd/scripts/update-website-version.ts" `
            "$outputFilePath";

      - name: Build Site
        run: pnpm build

      - name: Setup Pages
        if: ${{ inputs.dry-run == false }}
        uses: actions/configure-pages@v5

      - name: Upload Artifact
        if: ${{ inputs.dry-run == false }}
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: "${{ github.workspace }}/${{ vars.RELATIVE_ARTIFACT_DIR_PATH }}"

      - name: Deploy to GitHub Pages
        id: deployment
        if: ${{ inputs.dry-run == false }}
        uses: actions/deploy-pages@v4

      - name: Commit New Docs & Create Release Tag (${{ steps.apply_version_to_site.outputs.version }})
        if: ${{ inputs.dry-run == false }}
        run: |
          $apiVersion = "${{ inputs.api-version }}";

          # Add the letter 'v' if it is missing
          $apiVersion = $apiVersion.StartsWith("v") ? $apiVersion : "v" + $apiVersion;
          $apiVersion = "api-$apiVersion";
          
          $tag = "${{ steps.apply_version_to_site.outputs.version }}";

          git config --global user.email "${{ vars.GIT_CONFIG_EMAIL }}";
          git config --global user.name "Velaptor Docs Github Actions - (On behalf of Calvin Wilkinson)"; 

          git add -A;
          git commit -m "ðŸš€API Doc Release (Velaptor Version ${{ inputs.api-version }})";
          git push;

          # Create a website date specific releease tag
          git tag -a $tag -m "API Doc Release Version $apiVersion";
          git push origin $tag;

          # Create the Velaptor API version release tag
          # NOTE: This is used by the sample project links in the guides.
          git tag -a $apiVersion -m "Velaptor API Version $apiVersion";
          git push origin $apiVersion;
